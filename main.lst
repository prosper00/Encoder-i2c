
main.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	19c0006f          	j	19c <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	00000216          	.word	0x00000216
   c:	00000212          	.word	0x00000212
	...
  30:	00000212          	.word	0x00000212
  34:	00000000          	.word	0x00000000
  38:	00000212          	.word	0x00000212
  3c:	00000000          	.word	0x00000000
  40:	00000212          	.word	0x00000212
  44:	00000212          	.word	0x00000212
  48:	00000212          	.word	0x00000212
  4c:	00000212          	.word	0x00000212
  50:	000004b0          	.word	0x000004b0
  54:	00000212          	.word	0x00000212
  58:	00000212          	.word	0x00000212
  5c:	00000212          	.word	0x00000212
  60:	00000212          	.word	0x00000212
  64:	00000212          	.word	0x00000212
  68:	00000212          	.word	0x00000212
  6c:	00000212          	.word	0x00000212
  70:	00000212          	.word	0x00000212
  74:	00000212          	.word	0x00000212
  78:	00000522          	.word	0x00000522
  7c:	000006ce          	.word	0x000006ce
  80:	00000212          	.word	0x00000212
  84:	00000212          	.word	0x00000212
  88:	00000212          	.word	0x00000212
  8c:	00000212          	.word	0x00000212
  90:	00000212          	.word	0x00000212
  94:	00000212          	.word	0x00000212
  98:	00000212          	.word	0x00000212
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <onWrite>:

// callback function to handle i2c write requests
void onWrite( uint8_t reg, uint8_t length )
{
	// set LEDs on the board. Not implemented on the SOIC-8 device - insufficient pins
}
  a0:	8082                	ret

000000a2 <onRead>:

// callback function to handle i2c read requests
// called *after* the data is sent out
void onRead( uint8_t reg )
{
	i2c_read_registers[reg] = 0; // clear the buffers once it's been transmitted
  a2:	200007b7          	lui	a5,0x20000
  a6:	00478793          	add	a5,a5,4 # 20000004 <i2c_read_registers>
  aa:	97aa                	add	a5,a5,a0
  ac:	00078023          	sb	zero,0(a5)
}
  b0:	8082                	ret

000000b2 <LEDsoff>:

void LEDsoff( void )
{
	for ( uint8_t i = 0; i < sizeof( LEDS ); i++ )
	{
		funDigitalWrite( LEDS[i], FUN_LOW );
  b2:	40011637          	lui	a2,0x40011
{
  b6:	4681                	li	a3,0
		funDigitalWrite( LEDS[i], FUN_LOW );
  b8:	74400593          	li	a1,1860
  bc:	80060613          	add	a2,a2,-2048 # 40010800 <__global_pointer$+0x20010000>
  c0:	4305                	li	t1,1
	for ( uint8_t i = 0; i < sizeof( LEDS ); i++ )
  c2:	4531                	li	a0,12
		funDigitalWrite( LEDS[i], FUN_LOW );
  c4:	00b687b3          	add	a5,a3,a1
  c8:	0007c783          	lbu	a5,0(a5)
	for ( uint8_t i = 0; i < sizeof( LEDS ); i++ )
  cc:	0685                	add	a3,a3,1
		funDigitalWrite( LEDS[i], FUN_LOW );
  ce:	0047d713          	srl	a4,a5,0x4
  d2:	8bbd                	and	a5,a5,15
  d4:	072a                	sll	a4,a4,0xa
  d6:	07c1                	add	a5,a5,16
  d8:	9732                	add	a4,a4,a2
  da:	00f317b3          	sll	a5,t1,a5
  de:	cb1c                	sw	a5,16(a4)
	for ( uint8_t i = 0; i < sizeof( LEDS ); i++ )
  e0:	fea692e3          	bne	a3,a0,c4 <LEDsoff+0x12>
	}
}
  e4:	8082                	ret

000000e6 <updateLEDs>:
}

// updateLEDs(uint16_t) - activates the LED indicated by each bit position in the argument
//  i.e. bit 0 == LED 0 'on'
void updateLEDs( uint16_t num )
{
  e6:	1151                	add	sp,sp,-12
  e8:	c222                	sw	s0,4(sp)
  ea:	c406                	sw	ra,8(sp)
  ec:	842a                	mv	s0,a0
	LEDsoff();
  ee:	37d1                	jal	b2 <LEDsoff>

	for ( int i = 0; i < 12; i++ )
	{
		if ( num & 1 )
		{
			funDigitalWrite( LEDS[i], FUN_HIGH );
  f0:	400115b7          	lui	a1,0x40011
	for ( int i = 0; i < 12; i++ )
  f4:	4681                	li	a3,0
			funDigitalWrite( LEDS[i], FUN_HIGH );
  f6:	74400613          	li	a2,1860
  fa:	80058593          	add	a1,a1,-2048 # 40010800 <__global_pointer$+0x20010000>
  fe:	4305                	li	t1,1
	for ( int i = 0; i < 12; i++ )
 100:	4531                	li	a0,12
		if ( num & 1 )
 102:	00147793          	and	a5,s0,1
 106:	cf89                	beqz	a5,120 <updateLEDs+0x3a>
			funDigitalWrite( LEDS[i], FUN_HIGH );
 108:	00c687b3          	add	a5,a3,a2
 10c:	0007c783          	lbu	a5,0(a5)
 110:	0047d713          	srl	a4,a5,0x4
 114:	072a                	sll	a4,a4,0xa
 116:	8bbd                	and	a5,a5,15
 118:	972e                	add	a4,a4,a1
 11a:	00f317b3          	sll	a5,t1,a5
 11e:	cb1c                	sw	a5,16(a4)
	for ( int i = 0; i < 12; i++ )
 120:	0685                	add	a3,a3,1
		}
		num >>= 1;
 122:	8005                	srl	s0,s0,0x1
	for ( int i = 0; i < 12; i++ )
 124:	fca69fe3          	bne	a3,a0,102 <updateLEDs+0x1c>
	}
}
 128:	40a2                	lw	ra,8(sp)
 12a:	4412                	lw	s0,4(sp)
 12c:	0131                	add	sp,sp,12
 12e:	8082                	ret

00000130 <blip>:

void blip( void )
{
 130:	1151                	add	sp,sp,-12
 132:	c222                	sw	s0,4(sp)
 134:	c026                	sw	s1,0(sp)
 136:	c406                	sw	ra,8(sp)

	for ( int i = 0; i <= 12; i++ )
 138:	4401                	li	s0,0
#endif

void DelaySysTick( uint32_t n )
{
#ifdef CH32V003
	uint32_t targend = SysTick->CNT + n;
 13a:	e000f4b7          	lui	s1,0xe000f
	{
		updateLEDs( 1 << i );
 13e:	4505                	li	a0,1
 140:	00851533          	sll	a0,a0,s0
 144:	0542                	sll	a0,a0,0x10
 146:	8141                	srl	a0,a0,0x10
 148:	3f79                	jal	e6 <updateLEDs>
 14a:	4498                	lw	a4,8(s1)
 14c:	6799                	lui	a5,0x6
 14e:	dc078793          	add	a5,a5,-576 # 5dc0 <main.c.cba94b1a+0x3be9>
 152:	973e                	add	a4,a4,a5
	while ( ( (int32_t)( SysTick->CNT - targend ) ) < 0 )
 154:	449c                	lw	a5,8(s1)
 156:	8f99                	sub	a5,a5,a4
 158:	fe07cee3          	bltz	a5,154 <blip+0x24>
	for ( int i = 0; i <= 12; i++ )
 15c:	0405                	add	s0,s0,1
 15e:	47b5                	li	a5,13
 160:	fcf41fe3          	bne	s0,a5,13e <blip+0xe>
		Delay_Ms( 8 );
	}
	LEDsoff();
 164:	37b9                	jal	b2 <LEDsoff>

	for ( int i = 10; i >= 0; i-- )
 166:	4429                	li	s0,10
	uint32_t targend = SysTick->CNT + n;
 168:	e000f4b7          	lui	s1,0xe000f
	{
		updateLEDs( 1 << i );
 16c:	4505                	li	a0,1
 16e:	00851533          	sll	a0,a0,s0
 172:	0542                	sll	a0,a0,0x10
 174:	8141                	srl	a0,a0,0x10
 176:	3f85                	jal	e6 <updateLEDs>
 178:	4498                	lw	a4,8(s1)
 17a:	6799                	lui	a5,0x6
 17c:	dc078793          	add	a5,a5,-576 # 5dc0 <main.c.cba94b1a+0x3be9>
 180:	973e                	add	a4,a4,a5
	while ( ( (int32_t)( SysTick->CNT - targend ) ) < 0 )
 182:	449c                	lw	a5,8(s1)
 184:	8f99                	sub	a5,a5,a4
 186:	fe07cee3          	bltz	a5,182 <blip+0x52>
	for ( int i = 10; i >= 0; i-- )
 18a:	147d                	add	s0,s0,-1
 18c:	57fd                	li	a5,-1
 18e:	fcf41fe3          	bne	s0,a5,16c <blip+0x3c>
		Delay_Ms( 8 );
	}
	LEDsoff();
}
 192:	4412                	lw	s0,4(sp)
 194:	40a2                	lw	ra,8(sp)
 196:	4482                	lw	s1,0(sp)
 198:	0131                	add	sp,sp,12
	LEDsoff();
 19a:	bf21                	j	b2 <LEDsoff>

0000019c <handle_reset>:
 19c:	20000197          	auipc	gp,0x20000
 1a0:	66418193          	add	gp,gp,1636 # 20000800 <__global_pointer$>
 1a4:	00018113          	mv	sp,gp
 1a8:	08000513          	li	a0,128
 1ac:	30051073          	csrw	mstatus,a0
 1b0:	468d                	li	a3,3
 1b2:	00000517          	auipc	a0,0x0
 1b6:	e4e50513          	add	a0,a0,-434 # 0 <InterruptVector>
 1ba:	8d55                	or	a0,a0,a3
 1bc:	30551073          	csrw	mtvec,a0
 1c0:	20000517          	auipc	a0,0x20000
 1c4:	e4050513          	add	a0,a0,-448 # 20000000 <i2c_write_registers>
 1c8:	83c18593          	add	a1,gp,-1988 # 2000003c <_ebss>
 1cc:	4601                	li	a2,0
 1ce:	00b55663          	bge	a0,a1,1da <handle_reset+0x3e>
 1d2:	c110                	sw	a2,0(a0)
 1d4:	0511                	add	a0,a0,4
 1d6:	feb54ee3          	blt	a0,a1,1d2 <handle_reset+0x36>
 1da:	75000513          	li	a0,1872
 1de:	20000597          	auipc	a1,0x20000
 1e2:	e2258593          	add	a1,a1,-478 # 20000000 <i2c_write_registers>
 1e6:	20000617          	auipc	a2,0x20000
 1ea:	e1a60613          	add	a2,a2,-486 # 20000000 <i2c_write_registers>
 1ee:	00c58863          	beq	a1,a2,1fe <handle_reset+0x62>
 1f2:	4114                	lw	a3,0(a0)
 1f4:	c194                	sw	a3,0(a1)
 1f6:	0511                	add	a0,a0,4
 1f8:	0591                	add	a1,a1,4
 1fa:	fec59ae3          	bne	a1,a2,1ee <handle_reset+0x52>
 1fe:	e000f7b7          	lui	a5,0xe000f
 202:	4705                	li	a4,1
 204:	c398                	sw	a4,0(a5)
 206:	26000793          	li	a5,608
 20a:	34179073          	csrw	mepc,a5
 20e:	30200073          	mret

00000212 <ADC1_IRQHandler>:
 212:	9002                	ebreak
 214:	a001                	j	214 <ADC1_IRQHandler+0x2>

00000216 <NMI_Handler>:
 216:	40021737          	lui	a4,0x40021
 21a:	471c                	lw	a5,8(a4)
 21c:	008006b7          	lui	a3,0x800
 220:	8fd5                	or	a5,a5,a3
 222:	c71c                	sw	a5,8(a4)

00000224 <SystemInit>:
 224:	400217b7          	lui	a5,0x40021
 228:	00080737          	lui	a4,0x80
 22c:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x20020804>
 230:	08170713          	add	a4,a4,129 # 80081 <main.c.cba94b1a+0x7deaa>
 234:	c398                	sw	a4,0(a5)
 236:	40022737          	lui	a4,0x40022
 23a:	00072023          	sw	zero,0(a4) # 40022000 <__global_pointer$+0x20021800>
 23e:	009f0737          	lui	a4,0x9f0
 242:	c798                	sw	a4,8(a5)
 244:	e00007b7          	lui	a5,0xe0000
 248:	0f878793          	add	a5,a5,248 # e00000f8 <__global_pointer$+0xbffff8f8>
 24c:	0007a023          	sw	zero,0(a5)
 250:	e00007b7          	lui	a5,0xe0000
 254:	0f478793          	add	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
 258:	08000713          	li	a4,128
 25c:	c398                	sw	a4,0(a5)
 25e:	8082                	ret

00000260 <main>:

int main( void )
{
 260:	1141                	add	sp,sp,-16
 262:	c226                	sw	s1,4(sp)
 264:	c606                	sw	ra,12(sp)
 266:	c422                	sw	s0,8(sp)
	SystemInit();
 268:	3f75                	jal	224 <SystemInit>
	funGpioInitAll();
 26a:	40021737          	lui	a4,0x40021
 26e:	4f1c                	lw	a5,24(a4)
	funPinMode( PA1, GPIO_CFGLR_IN_FLOAT );
 270:	400116b7          	lui	a3,0x40011
 274:	80068693          	add	a3,a3,-2048 # 40010800 <__global_pointer$+0x20010000>
	funGpioInitAll();
 278:	0357e793          	or	a5,a5,53
 27c:	cf1c                	sw	a5,24(a4)
	funPinMode( PA1, GPIO_CFGLR_IN_FLOAT );
 27e:	4290                	lw	a2,0(a3)
	funPinMode( PA2, GPIO_CFGLR_IN_FLOAT );
 280:	757d                	lui	a0,0xfffff
 282:	0ff50513          	add	a0,a0,255 # fffff0ff <__global_pointer$+0xdfffe8ff>
	funPinMode( PA1, GPIO_CFGLR_IN_FLOAT );
 286:	f0f67613          	and	a2,a2,-241
 28a:	04066613          	or	a2,a2,64
 28e:	c290                	sw	a2,0(a3)
	funPinMode( PA2, GPIO_CFGLR_IN_FLOAT );
 290:	4290                	lw	a2,0(a3)
	funPinMode( PA1, GPIO_CFGLR_IN_FLOAT );
 292:	400117b7          	lui	a5,0x40011
	funPinMode( PC4, GPIO_CFGLR_IN_FLOAT );
 296:	fff105b7          	lui	a1,0xfff10
	funPinMode( PA2, GPIO_CFGLR_IN_FLOAT );
 29a:	8e69                	and	a2,a2,a0
 29c:	40066613          	or	a2,a2,1024
 2a0:	c290                	sw	a2,0(a3)
	funPinMode( PC4, GPIO_CFGLR_IN_FLOAT );
 2a2:	4390                	lw	a2,0(a5)
 2a4:	15fd                	add	a1,a1,-1 # fff0ffff <__global_pointer$+0xdff0f7ff>
	i2c_read_callback_t read_callback, bool read_only )
{
	i2c_slave_state.first_write = 1;
	i2c_slave_state.offset = 0;
	i2c_slave_state.position = 0;
	i2c_slave_state.read_registers1 = read_registers;
 2a6:	200004b7          	lui	s1,0x20000
 2aa:	8e6d                	and	a2,a2,a1
 2ac:	000405b7          	lui	a1,0x40
 2b0:	8e4d                	or	a2,a2,a1
 2b2:	c390                	sw	a2,0(a5)
	AFIO->EXTICR = ( AFIO_EXTICR1_EXTI1_PA | AFIO_EXTICR_EXTI4_PC );
 2b4:	20000593          	li	a1,512
 2b8:	40010637          	lui	a2,0x40010
 2bc:	c60c                	sw	a1,8(a2)
	EXTI->INTENR = ( EXTI_INTENR_MR1 | EXTI_INTENR_MR4 ); // Enable EXT line 1 and 4
 2be:	40060613          	add	a2,a2,1024 # 40010400 <__global_pointer$+0x2000fc00>
 2c2:	45c9                	li	a1,18
 2c4:	c20c                	sw	a1,0(a2)
	EXTI->FTENR = ( EXTI_FTENR_TR1 | EXTI_FTENR_TR4 ); // Falling edge trigger on channels/pins 1 and 4
 2c6:	c64c                	sw	a1,12(a2)
 *
 * @return  none
 */
RV_STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 2c8:	e000e637          	lui	a2,0xe000e
 2cc:	001005b7          	lui	a1,0x100
 2d0:	10b62023          	sw	a1,256(a2) # e000e100 <__global_pointer$+0xc000d900>
	funPinMode( PC1, GPIO_CFGLR_OUT_10Mhz_AF_OD ); // SDA
 2d4:	438c                	lw	a1,0(a5)
		funPinMode( LEDS[i], GPIO_CFGLR_OUT_2Mhz_PP );
 2d6:	43bd                	li	t2,15
 2d8:	4289                	li	t0,2
	funPinMode( PC1, GPIO_CFGLR_OUT_10Mhz_AF_OD ); // SDA
 2da:	f0f5f593          	and	a1,a1,-241
 2de:	0d05e593          	or	a1,a1,208
 2e2:	c38c                	sw	a1,0(a5)
	funPinMode( PC2, GPIO_CFGLR_OUT_10Mhz_AF_OD ); // SCL
 2e4:	438c                	lw	a1,0(a5)
	for ( uint8_t i = 0; i < sizeof( LEDS ); i++ )
 2e6:	4331                	li	t1,12
	funPinMode( PC2, GPIO_CFGLR_OUT_10Mhz_AF_OD ); // SCL
 2e8:	8de9                	and	a1,a1,a0
 2ea:	6505                	lui	a0,0x1
 2ec:	d0050513          	add	a0,a0,-768 # d00 <_data_lma+0x5b0>
 2f0:	8dc9                	or	a1,a1,a0
 2f2:	c38c                	sw	a1,0(a5)
	i2c_slave_state.first_write = 1;
 2f4:	200007b7          	lui	a5,0x20000
 2f8:	4585                	li	a1,1
 2fa:	00b79423          	sh	a1,8(a5) # 20000008 <i2c_slave_state>
	i2c_slave_state.position = 0;
 2fe:	00878793          	add	a5,a5,8
	i2c_slave_state.read_registers1 = read_registers;
 302:	00448593          	add	a1,s1,4 # 20000004 <i2c_read_registers>
 306:	c3cc                	sw	a1,4(a5)
	i2c_slave_state.write_registers1 = write_registers;
 308:	200005b7          	lui	a1,0x20000
 30c:	00058593          	mv	a1,a1
 310:	c78c                	sw	a1,8(a5)
	i2c_slave_state.read_size1 = read_size;
 312:	20200593          	li	a1,514
 316:	00b79623          	sh	a1,12(a5)
	i2c_slave_state.write_size1 = write_size;
	i2c_slave_state.read_registers2 = NULL;
	i2c_slave_state.write_registers2 = NULL;
	i2c_slave_state.read_size2 = 0;
	i2c_slave_state.write_size2 = 0;
	i2c_slave_state.write_callback1 = write_callback;
 31a:	0a000593          	li	a1,160
	i2c_slave_state.read_registers2 = NULL;
 31e:	0007a823          	sw	zero,16(a5)
	i2c_slave_state.write_callback1 = write_callback;
 322:	cfcc                	sw	a1,28(a5)
	i2c_slave_state.position = 0;
 324:	00078123          	sb	zero,2(a5)
	i2c_slave_state.write_registers2 = NULL;
 328:	0007aa23          	sw	zero,20(a5)
	i2c_slave_state.read_size2 = 0;
 32c:	00079c23          	sh	zero,24(a5)
	i2c_slave_state.read_callback1 = read_callback;
 330:	0a200593          	li	a1,162
 334:	d38c                	sw	a1,32(a5)
	i2c_slave_state.read_only1 = read_only;
 336:	02078223          	sb	zero,36(a5)
	i2c_slave_state.write_callback2 = NULL;
 33a:	0207a423          	sw	zero,40(a5)
	i2c_slave_state.read_callback2 = NULL;
 33e:	0207a623          	sw	zero,44(a5)
	i2c_slave_state.read_only2 = false;
 342:	02078823          	sb	zero,48(a5)

	// Enable I2C1
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
 346:	4f5c                	lw	a5,28(a4)
 348:	002005b7          	lui	a1,0x200
 34c:	8fcd                	or	a5,a5,a1
 34e:	cf5c                	sw	a5,28(a4)

	// Reset I2C1 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
 350:	4b1c                	lw	a5,16(a4)
		funPinMode( LEDS[i], GPIO_CFGLR_OUT_2Mhz_PP );
 352:	74400513          	li	a0,1860
 356:	8fcd                	or	a5,a5,a1
 358:	cb1c                	sw	a5,16(a4)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
 35a:	4b1c                	lw	a5,16(a4)
 35c:	ffe005b7          	lui	a1,0xffe00
 360:	15fd                	add	a1,a1,-1 # ffdfffff <__global_pointer$+0xdfdff7ff>
 362:	8fed                	and	a5,a5,a1
 364:	cb1c                	sw	a5,16(a4)

	I2C1->CTLR1 |= I2C_CTLR1_SWRST;
 366:	400057b7          	lui	a5,0x40005
 36a:	4007d703          	lhu	a4,1024(a5) # 40005400 <__global_pointer$+0x20004c00>
 36e:	65a1                	lui	a1,0x8
 370:	8f4d                	or	a4,a4,a1
 372:	40e79023          	sh	a4,1024(a5)
	I2C1->CTLR1 &= ~I2C_CTLR1_SWRST;
 376:	4007d703          	lhu	a4,1024(a5)
 37a:	800005b7          	lui	a1,0x80000
 37e:	0746                	sll	a4,a4,0x11
 380:	8345                	srl	a4,a4,0x11
 382:	40e79023          	sh	a4,1024(a5)

	// Set module clock frequency
	uint32_t prerate = 2000000; // I2C Logic clock rate, must be higher than the bus clock rate
	I2C1->CTLR2 |= ( FUNCONF_SYSTEM_CORE_CLOCK / prerate ) & I2C_CTLR2_FREQ;
 386:	4047d703          	lhu	a4,1028(a5)
 38a:	00c76713          	or	a4,a4,12
 38e:	40e79223          	sh	a4,1028(a5)

	// Enable interrupts
	I2C1->CTLR2 |= I2C_CTLR2_ITBUFEN | I2C_CTLR2_ITEVTEN | I2C_CTLR2_ITERREN;
 392:	4047d703          	lhu	a4,1028(a5)
 396:	70076713          	or	a4,a4,1792
 39a:	40e79223          	sh	a4,1028(a5)
 39e:	40000737          	lui	a4,0x40000
 3a2:	10e62023          	sw	a4,256(a2)
 *
 * @return  none
 */
RV_STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint8_t priority)
{
  NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
 3a6:	02000713          	li	a4,32
 3aa:	40e60f23          	sb	a4,1054(a2)
  NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 3ae:	10b62023          	sw	a1,256(a2)
  NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
 3b2:	40e60fa3          	sb	a4,1055(a2)
	NVIC_EnableIRQ( I2C1_ER_IRQn ); // Error interrupt
	NVIC_SetPriority( I2C1_ER_IRQn, 2 << 4 );

	// Set clock configuration
	uint32_t clockrate = 1000000; // I2C Bus clock rate, must be lower than the logic clock rate
	I2C1->CKCFGR = ( ( FUNCONF_SYSTEM_CORE_CLOCK / ( 3 * clockrate ) ) & I2C_CKCFGR_CCR ) |
 3b6:	7761                	lui	a4,0xffff8
 3b8:	0721                	add	a4,a4,8 # ffff8008 <__global_pointer$+0xdfff7808>
 3ba:	40e79e23          	sh	a4,1052(a5)

	// I2C1->CKCFGR = (FUNCONF_SYSTEM_CORE_CLOCK/(2*clockrate))&I2C_CKCFGR_CCR;
	// Standard mode good to 100kHz

	// Set I2C address
	I2C1->OADDR1 = address << 1;
 3be:	0ac00713          	li	a4,172
 3c2:	40e79423          	sh	a4,1032(a5)
	I2C1->OADDR2 = 0;
 3c6:	40079623          	sh	zero,1036(a5)

	// Enable I2C
	I2C1->CTLR1 |= I2C_CTLR1_PE;
 3ca:	4007d703          	lhu	a4,1024(a5)

	// Acknowledge bytes when they are received
	I2C1->CTLR1 |= I2C_CTLR1_ACK;
 3ce:	4581                	li	a1,0
	I2C1->CTLR1 |= I2C_CTLR1_PE;
 3d0:	00176713          	or	a4,a4,1
 3d4:	40e79023          	sh	a4,1024(a5)
	I2C1->CTLR1 |= I2C_CTLR1_ACK;
 3d8:	4007d703          	lhu	a4,1024(a5)
 3dc:	40076713          	or	a4,a4,1024
 3e0:	40e79023          	sh	a4,1024(a5)
 3e4:	00a587b3          	add	a5,a1,a0
 3e8:	0007c783          	lbu	a5,0(a5)
	for ( uint8_t i = 0; i < sizeof( LEDS ); i++ )
 3ec:	0585                	add	a1,a1,1 # 80000001 <__global_pointer$+0x5ffff801>
		funPinMode( LEDS[i], GPIO_CFGLR_OUT_2Mhz_PP );
 3ee:	0047d613          	srl	a2,a5,0x4
 3f2:	062a                	sll	a2,a2,0xa
 3f4:	9636                	add	a2,a2,a3
 3f6:	8bbd                	and	a5,a5,15
 3f8:	4200                	lw	s0,0(a2)
 3fa:	078a                	sll	a5,a5,0x2
 3fc:	00f39733          	sll	a4,t2,a5
 400:	fff74713          	not	a4,a4
 404:	8f61                	and	a4,a4,s0
 406:	00f297b3          	sll	a5,t0,a5
 40a:	8fd9                	or	a5,a5,a4
 40c:	c21c                	sw	a5,0(a2)
	for ( uint8_t i = 0; i < sizeof( LEDS ); i++ )
 40e:	fc659be3          	bne	a1,t1,3e4 <main+0x184>
	LEDS_Init();

	int8_t count = 0;
	bool off = false;

	blip();
 412:	3b39                	jal	130 <blip>
	updateLEDs( 1 );
 414:	4505                	li	a0,1
 416:	39c1                	jal	e6 <updateLEDs>
	bool off = false;
 418:	4701                	li	a4,0
	int8_t count = 0;
 41a:	4401                	li	s0,0
 *
 * @return  none
 */
__attribute__( ( always_inline ) ) RV_STATIC_INLINE void __WFI(void)
{
  NVIC->SCTLR &= ~(1<<3);   // wfi
 41c:	e000f6b7          	lui	a3,0xe000f
 420:	d106a783          	lw	a5,-752(a3) # e000ed10 <__global_pointer$+0xc000e510>
 424:	9bdd                	and	a5,a5,-9
 426:	d0f6a823          	sw	a5,-752(a3)
  asm volatile ("wfi");
 42a:	10500073          	wfi
	while ( 1 )
	{
		__WFI(); // halt until an event comes in
		// printf( "got: %2x %2x \n", i2c_read_registers[0], i2c_read_registers[1] );

		if ( encoder_button_event )
 42e:	8061c783          	lbu	a5,-2042(gp) # 20000006 <encoder_button_event>
 432:	cf89                	beqz	a5,44c <main+0x1ec>
		{
			if ( off )
 434:	c03a                	sw	a4,0(sp)
 436:	cb3d                	beqz	a4,4ac <main+0x24c>
			{
				blip();
 438:	39e5                	jal	130 <blip>
				updateLEDs( 1 << count );
 43a:	4505                	li	a0,1
 43c:	00851533          	sll	a0,a0,s0
 440:	0542                	sll	a0,a0,0x10
 442:	8141                	srl	a0,a0,0x10
 444:	314d                	jal	e6 <updateLEDs>
			}
			else
				blip();
 446:	4702                	lw	a4,0(sp)
			off = !off;
 448:	00174713          	xor	a4,a4,1
		}

		count += encoder_direction;
 44c:	8071c783          	lbu	a5,-2041(gp) # 20000007 <encoder_direction>
 450:	97a2                	add	a5,a5,s0
 452:	0ff7f793          	zext.b	a5,a5
		if ( count >= 11 ) count = 11;
		if ( count <= 0 ) count = 0;
 456:	86be                	mv	a3,a5
 458:	07e2                	sll	a5,a5,0x18
 45a:	87e1                	sra	a5,a5,0x18
 45c:	0007d363          	bgez	a5,462 <main+0x202>
 460:	4681                	li	a3,0
 462:	01869793          	sll	a5,a3,0x18
 466:	87e1                	sra	a5,a5,0x18
 468:	45ad                	li	a1,11
 46a:	00f5d363          	bge	a1,a5,470 <main+0x210>
 46e:	46ad                	li	a3,11
		if ( encoder_direction )
 470:	8071c783          	lbu	a5,-2041(gp) # 20000007 <encoder_direction>
 474:	01869413          	sll	s0,a3,0x18
 478:	8461                	sra	s0,s0,0x18
 47a:	cb81                	beqz	a5,48a <main+0x22a>
		{
			updateLEDs( 1 << count );
 47c:	4505                	li	a0,1
 47e:	00d51533          	sll	a0,a0,a3
 482:	0542                	sll	a0,a0,0x10
 484:	8141                	srl	a0,a0,0x10
 486:	3185                	jal	e6 <updateLEDs>
			off = false;
 488:	4701                	li	a4,0
		}

		encoder_direction = 0;
 48a:	800183a3          	sb	zero,-2041(gp) # 20000007 <encoder_direction>
		encoder_button_event = 0;
 48e:	80018323          	sb	zero,-2042(gp) # 20000006 <encoder_button_event>

		// put the encoder data into the i2c queue to send
		i2c_read_registers[0] = count;
		i2c_read_registers[1] = !off;
 492:	200006b7          	lui	a3,0x20000
		i2c_read_registers[0] = count;
 496:	0ff47793          	zext.b	a5,s0
 49a:	00f48223          	sb	a5,4(s1)
		i2c_read_registers[1] = !off;
 49e:	00468693          	add	a3,a3,4 # 20000004 <i2c_read_registers>
 4a2:	00174793          	xor	a5,a4,1
 4a6:	00f680a3          	sb	a5,1(a3)
		__WFI(); // halt until an event comes in
 4aa:	bf8d                	j	41c <main+0x1bc>
				blip();
 4ac:	3151                	jal	130 <blip>
 4ae:	bf61                	j	446 <main+0x1e6>

000004b0 <EXTI7_0_IRQHandler>:

volatile int_least8_t encoder_direction;
volatile int_least8_t encoder_button_event;

void EXTI7_0_IRQHandler( void )
{
 4b0:	1151                	add	sp,sp,-12
 4b2:	c03e                	sw	a5,0(sp)
	// check if EXT1 [rotation] fired:
	if ( EXTI->INTFR & EXTI_Line1 )
 4b4:	400107b7          	lui	a5,0x40010
 4b8:	40078793          	add	a5,a5,1024 # 40010400 <__global_pointer$+0x2000fc00>
 4bc:	4bdc                	lw	a5,20(a5)
{
 4be:	c436                	sw	a3,8(sp)
 4c0:	c23a                	sw	a4,4(sp)
	if ( EXTI->INTFR & EXTI_Line1 )
 4c2:	8b89                	and	a5,a5,2
 4c4:	c79d                	beqz	a5,4f2 <EXTI7_0_IRQHandler+0x42>
	{
		// read the OTHER (non EXTI) encoder pin
		if ( !( funDigitalRead( PA2 ) ) )
 4c6:	400117b7          	lui	a5,0x40011
 4ca:	80078793          	add	a5,a5,-2048 # 40010800 <__global_pointer$+0x20010000>
 4ce:	479c                	lw	a5,8(a5)
 4d0:	8b91                	and	a5,a5,4
 4d2:	e7a1                	bnez	a5,51a <EXTI7_0_IRQHandler+0x6a>
			encoder_direction--;
 4d4:	8071c783          	lbu	a5,-2041(gp) # 20000007 <encoder_direction>
 4d8:	17fd                	add	a5,a5,-1
		else
			encoder_direction++;
 4da:	07e2                	sll	a5,a5,0x18
 4dc:	87e1                	sra	a5,a5,0x18
 4de:	80f183a3          	sb	a5,-2041(gp) # 20000007 <encoder_direction>

		// Acknowledge the interrupt
		EXTI->INTFR |= EXTI_Line1;
 4e2:	400107b7          	lui	a5,0x40010
 4e6:	40078793          	add	a5,a5,1024 # 40010400 <__global_pointer$+0x2000fc00>
 4ea:	4bd8                	lw	a4,20(a5)
 4ec:	00276713          	or	a4,a4,2
 4f0:	cbd8                	sw	a4,20(a5)
	}

	// check if EXT4 [pushbutton] fired:
	if ( EXTI->INTFR & EXTI_Line4 )
 4f2:	400107b7          	lui	a5,0x40010
 4f6:	40078793          	add	a5,a5,1024 # 40010400 <__global_pointer$+0x2000fc00>
 4fa:	4bd8                	lw	a4,20(a5)
 4fc:	8b41                	and	a4,a4,16
 4fe:	cb01                	beqz	a4,50e <EXTI7_0_IRQHandler+0x5e>
	{
		encoder_button_event = 1;
 500:	4685                	li	a3,1
 502:	80d18323          	sb	a3,-2042(gp) # 20000006 <encoder_button_event>
		//  Acknowledge the interrupt
		EXTI->INTFR |= EXTI_Line4;
 506:	4bd8                	lw	a4,20(a5)
 508:	01076713          	or	a4,a4,16
 50c:	cbd8                	sw	a4,20(a5)
	}
}
 50e:	46a2                	lw	a3,8(sp)
 510:	4712                	lw	a4,4(sp)
 512:	4782                	lw	a5,0(sp)
 514:	0131                	add	sp,sp,12
 516:	30200073          	mret
			encoder_direction++;
 51a:	8071c783          	lbu	a5,-2041(gp) # 20000007 <encoder_direction>
 51e:	0785                	add	a5,a5,1
 520:	bf6d                	j	4da <EXTI7_0_IRQHandler+0x2a>

00000522 <I2C1_EV_IRQHandler>:
	i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler( void ) __attribute__( ( interrupt ) );
void I2C1_EV_IRQHandler( void )
{
 522:	7179                	add	sp,sp,-48
 524:	c03e                	sw	a5,0(sp)
	uint16_t STAR1, STAR2 __attribute__( ( unused ) );
	STAR1 = I2C1->STAR1;
 526:	400057b7          	lui	a5,0x40005
{
 52a:	c23a                	sw	a4,4(sp)
	STAR1 = I2C1->STAR1;
 52c:	4147d703          	lhu	a4,1044(a5) # 40005414 <__global_pointer$+0x20004c14>
 530:	40078793          	add	a5,a5,1024
	STAR2 = I2C1->STAR2;
 534:	0187d783          	lhu	a5,24(a5)
{
 538:	cc26                	sw	s1,24(sp)
 53a:	d606                	sw	ra,44(sp)
	STAR1 = I2C1->STAR1;
 53c:	01071493          	sll	s1,a4,0x10
{
 540:	d416                	sw	t0,40(sp)
 542:	d21a                	sw	t1,36(sp)
 544:	d01e                	sw	t2,32(sp)
 546:	ce22                	sw	s0,28(sp)
 548:	ca2a                	sw	a0,20(sp)
 54a:	c82e                	sw	a1,16(sp)
 54c:	c632                	sw	a2,12(sp)
 54e:	c436                	sw	a3,8(sp)

	if ( STAR1 & I2C_STAR1_ADDR )
 550:	8b09                	and	a4,a4,2
	STAR1 = I2C1->STAR1;
 552:	80c1                	srl	s1,s1,0x10
	if ( STAR1 & I2C_STAR1_ADDR )
 554:	c315                	beqz	a4,578 <I2C1_EV_IRQHandler+0x56>
	{ // Start event
		i2c_slave_state.first_write = 1; // Next write will be the offset
 556:	20000737          	lui	a4,0x20000
 55a:	00870713          	add	a4,a4,8 # 20000008 <i2c_slave_state>
 55e:	4685                	li	a3,1
 560:	07c2                	sll	a5,a5,0x10
 562:	83c1                	srl	a5,a5,0x10
 564:	00d70023          	sb	a3,0(a4)
		i2c_slave_state.position = i2c_slave_state.offset; // Reset position
 568:	00174683          	lbu	a3,1(a4)
		i2c_slave_state.address2matched = !!( STAR2 & I2C_STAR2_DUALF );
 56c:	839d                	srl	a5,a5,0x7
 56e:	8b85                	and	a5,a5,1
		i2c_slave_state.position = i2c_slave_state.offset; // Reset position
 570:	00d70123          	sb	a3,2(a4)
		i2c_slave_state.address2matched = !!( STAR2 & I2C_STAR2_DUALF );
 574:	02f70923          	sb	a5,50(a4)
	}

	if ( STAR1 & I2C_STAR1_RXNE )
 578:	0404f793          	and	a5,s1,64
 57c:	cb85                	beqz	a5,5ac <I2C1_EV_IRQHandler+0x8a>
	{ // Write event
		if ( i2c_slave_state.first_write )
 57e:	200007b7          	lui	a5,0x20000
 582:	00878793          	add	a5,a5,8 # 20000008 <i2c_slave_state>
 586:	0007c703          	lbu	a4,0(a5)
 58a:	c769                	beqz	a4,654 <I2C1_EV_IRQHandler+0x132>
		{ // First byte written, set the offset
			i2c_slave_state.offset = I2C1->DATAR;
 58c:	40005737          	lui	a4,0x40005
 590:	40070713          	add	a4,a4,1024 # 40005400 <__global_pointer$+0x20004c00>
 594:	01075703          	lhu	a4,16(a4)
			i2c_slave_state.position = i2c_slave_state.offset;
			i2c_slave_state.first_write = 0;
 598:	00078023          	sb	zero,0(a5)
			i2c_slave_state.writing = false;
 59c:	020788a3          	sb	zero,49(a5)
			i2c_slave_state.offset = I2C1->DATAR;
 5a0:	0ff77713          	zext.b	a4,a4
 5a4:	00e780a3          	sb	a4,1(a5)
			i2c_slave_state.position = i2c_slave_state.offset;
 5a8:	00e78123          	sb	a4,2(a5)
				}
			}
		}
	}

	if ( STAR1 & I2C_STAR1_TXE )
 5ac:	0804f793          	and	a5,s1,128
 5b0:	c7b1                	beqz	a5,5fc <I2C1_EV_IRQHandler+0xda>
	{ // Read event
		i2c_slave_state.writing = false;
 5b2:	20000437          	lui	s0,0x20000
 5b6:	00840793          	add	a5,s0,8 # 20000008 <i2c_slave_state>
		if ( i2c_slave_state.address2matched )
 5ba:	0327c703          	lbu	a4,50(a5)
		{
			if ( i2c_slave_state.position < i2c_slave_state.read_size2 )
 5be:	0027c503          	lbu	a0,2(a5)
		i2c_slave_state.writing = false;
 5c2:	020788a3          	sb	zero,49(a5)
		if ( i2c_slave_state.address2matched )
 5c6:	400057b7          	lui	a5,0x40005
 5ca:	40078793          	add	a5,a5,1024 # 40005400 <__global_pointer$+0x20004c00>
 5ce:	00840413          	add	s0,s0,8
 5d2:	cb79                	beqz	a4,6a8 <I2C1_EV_IRQHandler+0x186>
			if ( i2c_slave_state.position < i2c_slave_state.read_size2 )
 5d4:	01844703          	lbu	a4,24(s0)
 5d8:	0ee57663          	bgeu	a0,a4,6c4 <I2C1_EV_IRQHandler+0x1a2>
			{
				I2C1->DATAR = i2c_slave_state.read_registers2[i2c_slave_state.position];
 5dc:	4818                	lw	a4,16(s0)
 5de:	972a                	add	a4,a4,a0
 5e0:	00074703          	lbu	a4,0(a4)
 5e4:	0ff77713          	zext.b	a4,a4
 5e8:	00e79823          	sh	a4,16(a5)
				if ( i2c_slave_state.read_callback2 != NULL )
 5ec:	545c                	lw	a5,44(s0)
		{
			if ( i2c_slave_state.position < i2c_slave_state.read_size1 )
			{
				// should I move this to *after* the callback?
				I2C1->DATAR = i2c_slave_state.read_registers1[i2c_slave_state.position];
				if ( i2c_slave_state.read_callback1 != NULL )
 5ee:	c391                	beqz	a5,5f2 <I2C1_EV_IRQHandler+0xd0>
				{
					i2c_slave_state.read_callback1( i2c_slave_state.position );
 5f0:	9782                	jalr	a5
				}
				i2c_slave_state.position++;
 5f2:	00244783          	lbu	a5,2(s0)
 5f6:	0785                	add	a5,a5,1
 5f8:	00f40123          	sb	a5,2(s0)
				I2C1->DATAR = 0x00;
			}
		}
	}

	if ( STAR1 & I2C_STAR1_STOPF )
 5fc:	88c1                	and	s1,s1,16
 5fe:	cc85                	beqz	s1,636 <I2C1_EV_IRQHandler+0x114>
	{ // Stop event
		I2C1->CTLR1 &= ~( I2C_CTLR1_STOP ); // Clear stop
 600:	400057b7          	lui	a5,0x40005
 604:	4007d703          	lhu	a4,1024(a5) # 40005400 <__global_pointer$+0x20004c00>
 608:	66c1                	lui	a3,0x10
 60a:	dff68693          	add	a3,a3,-513 # fdff <main.c.cba94b1a+0xdc28>
 60e:	8f75                	and	a4,a4,a3
 610:	40e79023          	sh	a4,1024(a5)
		if ( i2c_slave_state.address2matched )
 614:	200007b7          	lui	a5,0x20000
 618:	00878793          	add	a5,a5,8 # 20000008 <i2c_slave_state>
 61c:	0327c703          	lbu	a4,50(a5)
 620:	c74d                	beqz	a4,6ca <I2C1_EV_IRQHandler+0x1a8>
		{
			if ( i2c_slave_state.write_callback2 != NULL )
 622:	5798                	lw	a4,40(a5)
					i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset );
			}
		}
		else
		{
			if ( i2c_slave_state.write_callback1 != NULL )
 624:	cb09                	beqz	a4,636 <I2C1_EV_IRQHandler+0x114>
			{
				i2c_slave_state.write_callback1(
 626:	0017c503          	lbu	a0,1(a5)
 62a:	0027c583          	lbu	a1,2(a5)
 62e:	8d89                	sub	a1,a1,a0
 630:	0ff5f593          	zext.b	a1,a1
 634:	9702                	jalr	a4
					i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset );
			}
		}
	}
}
 636:	4472                	lw	s0,28(sp)
 638:	50b2                	lw	ra,44(sp)
 63a:	52a2                	lw	t0,40(sp)
 63c:	5312                	lw	t1,36(sp)
 63e:	5382                	lw	t2,32(sp)
 640:	44e2                	lw	s1,24(sp)
 642:	4552                	lw	a0,20(sp)
 644:	45c2                	lw	a1,16(sp)
 646:	4632                	lw	a2,12(sp)
 648:	46a2                	lw	a3,8(sp)
 64a:	4712                	lw	a4,4(sp)
 64c:	4782                	lw	a5,0(sp)
 64e:	6145                	add	sp,sp,48
 650:	30200073          	mret
			if ( i2c_slave_state.address2matched )
 654:	0327c683          	lbu	a3,50(a5)
			i2c_slave_state.writing = true;
 658:	4705                	li	a4,1
 65a:	02e788a3          	sb	a4,49(a5)
				if ( i2c_slave_state.position < i2c_slave_state.write_size2 && !i2c_slave_state.read_only2 )
 65e:	0027c703          	lbu	a4,2(a5)
			if ( i2c_slave_state.address2matched )
 662:	c695                	beqz	a3,68e <I2C1_EV_IRQHandler+0x16c>
				if ( i2c_slave_state.position < i2c_slave_state.write_size2 && !i2c_slave_state.read_only2 )
 664:	0197c683          	lbu	a3,25(a5)
 668:	f4d772e3          	bgeu	a4,a3,5ac <I2C1_EV_IRQHandler+0x8a>
 66c:	0307c683          	lbu	a3,48(a5)
 670:	fe95                	bnez	a3,5ac <I2C1_EV_IRQHandler+0x8a>
					i2c_slave_state.write_registers2[i2c_slave_state.position] = I2C1->DATAR;
 672:	400056b7          	lui	a3,0x40005
 676:	4106d603          	lhu	a2,1040(a3) # 40005410 <__global_pointer$+0x20004c10>
 67a:	4bd4                	lw	a3,20(a5)
					i2c_slave_state.write_registers1[i2c_slave_state.position] = I2C1->DATAR;
 67c:	96ba                	add	a3,a3,a4
 67e:	0ff67613          	zext.b	a2,a2
 682:	00c68023          	sb	a2,0(a3)
					i2c_slave_state.position++;
 686:	0705                	add	a4,a4,1
 688:	00e78123          	sb	a4,2(a5)
 68c:	b705                	j	5ac <I2C1_EV_IRQHandler+0x8a>
				if ( i2c_slave_state.position < i2c_slave_state.write_size1 && !i2c_slave_state.read_only1 )
 68e:	00d7c683          	lbu	a3,13(a5)
 692:	f0d77de3          	bgeu	a4,a3,5ac <I2C1_EV_IRQHandler+0x8a>
 696:	0247c683          	lbu	a3,36(a5)
 69a:	fa89                	bnez	a3,5ac <I2C1_EV_IRQHandler+0x8a>
					i2c_slave_state.write_registers1[i2c_slave_state.position] = I2C1->DATAR;
 69c:	400056b7          	lui	a3,0x40005
 6a0:	4106d603          	lhu	a2,1040(a3) # 40005410 <__global_pointer$+0x20004c10>
 6a4:	4794                	lw	a3,8(a5)
 6a6:	bfd9                	j	67c <I2C1_EV_IRQHandler+0x15a>
			if ( i2c_slave_state.position < i2c_slave_state.read_size1 )
 6a8:	00c44703          	lbu	a4,12(s0)
 6ac:	00e57c63          	bgeu	a0,a4,6c4 <I2C1_EV_IRQHandler+0x1a2>
				I2C1->DATAR = i2c_slave_state.read_registers1[i2c_slave_state.position];
 6b0:	4058                	lw	a4,4(s0)
 6b2:	972a                	add	a4,a4,a0
 6b4:	00074703          	lbu	a4,0(a4)
 6b8:	0ff77713          	zext.b	a4,a4
 6bc:	00e79823          	sh	a4,16(a5)
				if ( i2c_slave_state.read_callback1 != NULL )
 6c0:	501c                	lw	a5,32(s0)
 6c2:	b735                	j	5ee <I2C1_EV_IRQHandler+0xcc>
				I2C1->DATAR = 0x00;
 6c4:	00079823          	sh	zero,16(a5)
 6c8:	bf15                	j	5fc <I2C1_EV_IRQHandler+0xda>
			if ( i2c_slave_state.write_callback1 != NULL )
 6ca:	4fd8                	lw	a4,28(a5)
 6cc:	bfa1                	j	624 <I2C1_EV_IRQHandler+0x102>

000006ce <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler( void ) __attribute__( ( interrupt ) );
void I2C1_ER_IRQHandler( void )
{
 6ce:	1141                	add	sp,sp,-16
 6d0:	c03e                	sw	a5,0(sp)
	uint16_t STAR1 = I2C1->STAR1;
 6d2:	400057b7          	lui	a5,0x40005
{
 6d6:	c436                	sw	a3,8(sp)
	uint16_t STAR1 = I2C1->STAR1;
 6d8:	4147d683          	lhu	a3,1044(a5) # 40005414 <__global_pointer$+0x20004c14>
{
 6dc:	c23a                	sw	a4,4(sp)
 6de:	c632                	sw	a2,12(sp)
	uint16_t STAR1 = I2C1->STAR1;
 6e0:	01069713          	sll	a4,a3,0x10

	if ( STAR1 & I2C_STAR1_BERR )
 6e4:	1006f693          	and	a3,a3,256
	uint16_t STAR1 = I2C1->STAR1;
 6e8:	8341                	srl	a4,a4,0x10
	if ( STAR1 & I2C_STAR1_BERR )
 6ea:	ca99                	beqz	a3,700 <I2C1_ER_IRQHandler+0x32>
	{ // Bus error
		I2C1->STAR1 &= ~( I2C_STAR1_BERR ); // Clear error
 6ec:	4147d683          	lhu	a3,1044(a5)
 6f0:	6641                	lui	a2,0x10
 6f2:	eff60613          	add	a2,a2,-257 # feff <main.c.cba94b1a+0xdd28>
 6f6:	8ef1                	and	a3,a3,a2
 6f8:	40078793          	add	a5,a5,1024
 6fc:	00d79a23          	sh	a3,20(a5)
	}

	if ( STAR1 & I2C_STAR1_ARLO )
 700:	20077793          	and	a5,a4,512
 704:	cb99                	beqz	a5,71a <I2C1_ER_IRQHandler+0x4c>
	{ // Arbitration lost error
		I2C1->STAR1 &= ~( I2C_STAR1_ARLO ); // Clear error
 706:	400057b7          	lui	a5,0x40005
 70a:	4147d683          	lhu	a3,1044(a5) # 40005414 <__global_pointer$+0x20004c14>
 70e:	6641                	lui	a2,0x10
 710:	dff60613          	add	a2,a2,-513 # fdff <main.c.cba94b1a+0xdc28>
 714:	8ef1                	and	a3,a3,a2
 716:	40d79a23          	sh	a3,1044(a5)
	}

	if ( STAR1 & I2C_STAR1_AF )
 71a:	40077713          	and	a4,a4,1024
 71e:	cb19                	beqz	a4,734 <I2C1_ER_IRQHandler+0x66>
	{ // Acknowledge failure
		I2C1->STAR1 &= ~( I2C_STAR1_AF ); // Clear error
 720:	400057b7          	lui	a5,0x40005
 724:	4147d703          	lhu	a4,1044(a5) # 40005414 <__global_pointer$+0x20004c14>
 728:	66c1                	lui	a3,0x10
 72a:	bff68693          	add	a3,a3,-1025 # fbff <main.c.cba94b1a+0xda28>
 72e:	8f75                	and	a4,a4,a3
 730:	40e79a23          	sh	a4,1044(a5)
	}
}
 734:	4632                	lw	a2,12(sp)
 736:	46a2                	lw	a3,8(sp)
 738:	4712                	lw	a4,4(sp)
 73a:	4782                	lw	a5,0(sp)
 73c:	0141                	add	sp,sp,16
 73e:	30200073          	mret
	...

00000744 <LEDS>:
 744:	26252320 35363727 30323334               #%&'7654320
